1.二叉搜索树的定义
  二叉搜索树（BST）是二叉树的一种特殊表示形式，它满足如下特性：
  每个节点中的值必须大于（或等于）存储在其左侧子树中的任何值。
  每个节点中的值必须小于（或等于）存储在其右子树中的任何值。
  要想有序地存储数据或者需要同时执行搜索、插入、删除等多步操作，二叉搜索树这个数据结构是一个很好的选择。
  像普通的二叉树一样，我们可以按照前序、中序和后序来遍历一个二叉搜索树。 但是值得注意的是，对于二叉搜索树，
  我们可以通过中序遍历得到一个递增的有序序列。因此，中序遍历是二叉搜索树中最常用的遍历方法。
  class TreeNode:   #定义树的节点
     def __init__(self, x):
		self.val = x
		self.left = None
		self.right = None
  def travel(self,tree):                                 
	if not tree:
	    return []
	root = tree.val
	left = self.travel(tree.left)
	right = self.travel(tree.right)
	return left+[root]+right

  def isValidBST(self, root: TreeNode) -> bool: #验证是否为二叉搜索树
	res = []								#（中序遍历递增）
	self.inorder(root,res)
	for i in range(1,len(res)):
	if res[i-1] >= res[i]:
		return False
 	return True
	
  def inorder(self, tree):
	if tree:
	    self.inorder(tree.left)
	    res.append(tree.val)
	    self.inorder(tree.right)
注意：每次递归有操作都是在root的地方操作的，递归出口就是tree是None
     在其他函数中修改传进来的变量，在主函数中变量的值也会被改变，因为python是引用传递；
     如何判断一个列表有序：o(n)遍历比较前后两个值

2. 二叉搜索树迭代器
class BSTIterator:
    def __init__(self, root: TreeNode):
        self.root = root
        self.res = []
        self.inorder(root)
        self.index = -1
    
    def inorder(self,root):
        if root:
            self.inorder(root.left)
            self.res.append(root.val)
            self.inorder(root.right)

    def next(self) -> int:  # o(1)
        """
        @return the next smallest number
        """
        self.index += 1
        return self.res[self.index]

    def hasNext(self) -> bool: # o(1)
        """
        @return whether we have a next smallest number
        """
        if self.index+1 >= len(self.res):
            return False
        else:
            return True

注意：构造函数中可以使用类中的方法函数

3. 二叉树的构建和遍历
class Node(object):
    """二叉树节点"""
    def __init__(self, elem=-1, lchild=None, rchild=None):
        self.elem = elem
        self.lchild = lchild
        self.rchild = rchild
class Tree(object):
    """二叉树"""
    def __init__(self, root=None):
        self.root = root

    def add(self, elem)："""为树添加节点""" 类似于层次遍历
        node = Node(elem)
        if self.root == None:  # 如果树是空的，则对根节点赋值
            self.root = node
        else:
            queue = list()
            queue.append(self.root)
            while queue:    # 弹出队列的第一个元素
                cur = queue.pop(0)
                if cur.lchild == None:
                    cur.lchild = node
                    return
                elif cur.rchild == None:
                    cur.rchild = node
                    return
                else:
                 # 如果左右子树都不为空，往判断列表加入子树，循环进行子树的判断
                    queue.append(cur.lchild)
                    queue.append(cur.rchild)

    def preorder(self, root):
        """递归实现先序遍历"""
        if root == None:
            return
        print(root.elem)
        self.preorder(root.lchild)
        self.preorder(root.rchild)

    def inorder(self, root):
        """递归实现中序遍历"""
        if root == None:
            return
        self.inorder(root.lchild)
        print(root.elem)
        self.inorder(root.rchild)

    def postorder(self, root):
        """递归实现后续遍历"""
        if root == None:
            return
        self.postorder(root.lchild)
        self.postorder(root.rchild)
        print(root.elem)

    def breadth_travel(self, root):
        """利用队列实现树的层次遍历"""
        if root == None:
            return
        queue = list()
        queue.append(root)
        while queue:
            node = queue.pop(0)
            print(node.elem)
            if node.lchild != None:
                queue.append(node.lchild)
            if node.rchild != None:
                queue.append(node.rchild)

4. 二叉搜索树的搜索
    根据BST的特性，对于每个节点：
      如果目标值等于节点的值，则返回节点;
      如果目标值小于节点的值，则继续在左子树中搜索;
      如果目标值大于节点的值，则继续在右子树中搜索。

5. 二叉搜索树的插入
    二叉搜索树中的另一个常见操作是插入一个新节点：目标节点找出合适的叶节点位置，然后将该节点作为叶节点插入。
    与搜索操作类似，对于每个节点，我们将：
        根据节点值与目标节点值的关系，搜索左子树或右子树；
        重复步骤 1 直到到达外部节点；
        根据节点的值与目标节点的值的关系，将新节点添加为其左侧或右侧的子节点。

6. 二叉搜索树的删除 difficult
    用一个合适的子节点来替换要删除的目标节点。根据其子节点的个数，我们需考虑以下三种情况：
      1) 如果目标节点没有子节点，我们可以直接移除该目标节点。
      2) 如果目标节只有一个子节点，我们可以用其子节点作为替换。
      3) 如果目标节点有两个子节点，我们需要用其中序后继节点或者前驱节点来替换，再删除该目标节点。

7. 数据流中的第K大元素
   二叉搜索树：遍历每一个节点，如果K大于该节点的所有右子树节点数量，则位于左子树中，把k减去右子树节点数；如果K小于该节点的所有右子树节点数量+1，位于右子树中；K=节点所有右子树节点数量+1 
但是如果插入的值中有重复的就很不好算
插入的时间复杂度o(h) 找第k大元素时间复杂度o(h*h)
   维护最小堆（完全二叉树）：用数组前 k 个元素建立 k 个节点的最小堆，后续输入如果大于最小堆的最小值，即头部，那么恭喜它，它入选了。
   然后把当前最小堆头部换成新元素，重新堆化。继续，循环，直到数据输入完毕。最小堆中剩余的 k 个元素即数据集中最大的k个数。
初始化阶段 O(nlogk)，add操作 O(logk)
   排序+每次插入时的二分查找，时间复杂度o(TlogN)  T插入次数 N个数

8. 拓展：平衡二叉树、平衡二叉搜索树（AVL树）
  对一棵查找树（search tree）进行查询/新增/删除等动作, 所花的时间与树的高度h 成比例, 并不与树的容量 n 成比例。
  如果可以让树维持矮矮胖胖的好身材, 也就是让h维持在O(lgn)左右, 完成上述工作就很省时间。
  
  由于普通的二叉查找树会容易失去”平衡“，极端情况下，二叉查找树会退化成线性的链表，导致插入和查找的复杂度下降到 O(n)
  平衡二叉树（Balanced Binary Tree）：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1
  平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等
  平衡二叉搜索树（AVL）一定是二叉搜索树
  
  判断平衡二叉搜索树？？
    一个高度平衡二叉树是指一个二叉树每个节点的左右两个子树的高度差的绝对值不超过 1
    一个有N个节点的平衡二搜索叉树的高度总是logN
   
  为什么需要平衡二叉搜索树？？
    具有N个节点的二叉搜索树的高度在logN到N区间变化。也就是说，搜索操作的时间复杂度可以从logN变化到N
    这是一个巨大的性能差异
    
  平衡二叉搜索树的应用？？
  平衡二叉搜索树的概念经常运用在Set和Map中通常，有两种最广泛使用的集合：散列集合(Hash Set)和树集合(Tree Set)。
    树集合, Java中的Treeset或者C++中的set，是由高度平衡的二叉搜索树实现的。因此，搜索、插入和删除的时间复杂度
    都是O(logN)。
    散列集合, Java中的HashSet或者C++中的unordered_set，是由哈希实现的, 但是平衡二叉搜索树也起到了至关重要的作用。
    当存在具有相同哈希键的元素过多时，将花费O(N)时间复杂度来查找特定元素，其中N是具有相同哈希键的元素的数量。
    通常情况下，使用高度平衡的二叉搜索树将把时间复杂度从 O(N) 改善到 O(logN)。
    
    哈希集和树集之间的本质区别在于树集中的键是有序的

9.堆
  堆的结构可以分为大根堆和小根堆，是一个完全二叉树
  每个结点的值都大于其左孩子和右孩子结点的值，称之为大根堆；
  每个结点的值都小于其左孩子和右孩子结点的值，称之为小根堆。
  
  一种著名的数据结构是堆（heap），它是一种优先队列。优先队列让你能够以任意顺序添加对象，并随时（可能是在两次添加对象之间）
  找出（并删除）最小的元素。相比于列表方法min，这样做的效率要高得多。
  Python没有独立的堆类型，而只有一个包含一些堆操作函数的模块。这个模块名为heapq。必须使用列表来表示堆对象本身。
  堆特征：元素的排列顺序并不像看起来那么随意。它们虽然不是严格排序的，但必须保证一点：位置i处的元素总是大于位置i // 2处的元素
  （反过来说就是小于位置2 * i和2 * i + 1处的元素）。
 
  函 数                                                           描 述
  heappush(heap, x)                                        将x压入堆中
  heappop(heap)                                      从堆中弹出最小的元素
  heapify(heap)                                           让列表具备堆特征（小顶堆）
  heapreplace(heap, x)                            弹出最小的元素，并将x压入堆中
  nlargest(n, iter)                           返回iter中n个最大的元素（iter个数大于n）
  nsmallest(n, iter)                                   返回iter中n个最小的元素
  heappushpop( )方法会比先使用heappush( )再使用heappop( )这两单个方法效率来说会更高 增加一个数据并维护小顶堆性质
  
10. 二叉搜索树上的大部分操作需要花费的时间跟这颗树的高度直接相关
    对于查找问题：二分查找、哈希表、二叉搜索树、顺序查找
    java里面的二叉搜索树是用红黑树实现的自平衡二叉搜索树 
    TreeSet<Interger> set = new TreeSet<>();
    在一个滑动窗口中找到一个值落在（x-t,x+t）范围内 滑动窗口条件通过二叉树的size保证
    
11. 红黑树--二叉搜索树的一种（自平衡二叉搜索树）
    这些约束确保了红黑树的关键特性：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长
    红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。
    在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：
	节点是红色或黑色。
	根是黑色。
	所有叶子都是黑色（叶子是NIL节点）。
	每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）
	从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。
12. B树：	属于多叉树又名平衡多路查找树
    B树相对于平衡二叉树的不同是，每个节点包含的关键字增多了，特别是在B树应用到数据库中的时候，数据库充分利用
    了磁盘块的原理（磁盘数据存储是采用块的形式存储的，每个块的大小为4K，每次IO进行数据读取时，同一个磁盘块的数
    据可以一次性读取出来）把节点大小限制和充分使用在磁盘块大小范围；
    
13. B+树
    是B树的一个升级版，相对于B树来说B+树更充分的利用了节点的空间，让查询速度更加稳定，其速度完全接近于二分法查找
    每个节点上的关键字数和子节点数相同
    非叶子节点只存储每个子树中的最大或者最小的值，不存数据，数据只存在叶子节点中，叶子结点连成一个有序链表
    
    从平衡二叉树、B树、B+树、B*树总体来看它们的贯彻的思想是相同的，都是采用二分法和数据平衡策略来提升查找数据的速度；
    不同点是他们一个一个在演变的过程中通过IO从磁盘读取数据的原理进行一步步的演变，每一次演变都是为了让节点的空间更合
    理的运用起来，从而使树的层级减少达到快速查找数据的目的
14. 树结构中的常见用语:
    节点的深度 - 从树的根节点到该节点的边数
    节点的高度 - 该节点和叶子之间最长路径上的边数
    树的高度 - 其根节点的高度
15. 将有序数组转换为二叉搜索树
    递归方法：每次取列表中间的数做根节点，然后根节点的左右孩子的获取通过对左列表和右列表分别调用该方法，
    最后return node
16. 

	


