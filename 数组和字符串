1. 说起数组就要想到： 双指针/额外数组记录 (考虑需不需要排序）
2. 寻找数组中心索引：一般相加为定值的条件的要记得转换成减法的等式判断条件
3. 至少是其他数字两倍的最大数：if all( max>x*2 for x in nums if x!=m)
4. 加一: 
   通过int和str之间的转换求解 .join()
   或者 for i in range(len(digits)-1,-1,-1) 倒序遍历列表 一定要记住这个range里面的规则！！！！ 然后注意空列表和类似[9]的情况，当遍历到列表第一个值
   一定要判断一下还有没有进位（dividee/modee)
5. 对角线遍历
   找规律
6. 最长公共前缀 o(kn) 正常遍历
7. 反转字符串 [::-1]    列表字典字符串的基本方法一定要掌握！！！！！
8. 数组和字符串的双指针技巧！！！
   1) 从两端向中间迭代数组。
      这时你可以使用双指针技巧：一个指针从始端开始，而另一个指针从末端开始。值得注意的是，这种技巧经常在排序数组中使用
   2) 同时有一个慢指针和一个快指针。
      解决这类问题的关键是确定两个指针的移动策略。有时可能需要在使用双指针技巧之前对数组进行排序，也可能需要运用贪心想法来决定你的运动策略。
      例子：给定一个数组和一个值，原地删除该值的所有实例并返回新的长度
           相当于使用了两个指针，一个用于原始数组的迭代，另一个总是指向新数组的最后一个位置
           使用两个指针，一个快指针 i 和一个慢指针 k ，i 每次移动一步，而 k 只在添加新的被需要的值时才移动一步

9. 前缀树
   在字符串数据集中高效检索字符串
   与哈希表相比，Trie 树在存储多个具有相同前缀的键时可以使用较少的空间。此时 Trie 树只需要 O(m)的时间复杂度，其中m为键长。而在平衡树中查找键
   值需要 O(mlogn) 时间复杂度
   
   Trie，又经常叫前缀树，字典树等等。它有很多变种，如后缀树，Radix Tree/Trie，PATRICIA tree，以及bitwise版本的crit-bit tree。
   定义
   在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由
   节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，
   只有叶子节点和部分内部节点所对应的键才有相关的值。
   trie中的键通常是字符串，但也可以是其它的结构。trie的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。比如，bitwise trie
   中的键是一串位元，可以用于表示整数或者内存地址
   
   基本性质
   1，根节点不包含字符，除根节点意外每个节点只包含一个字符。
   2，从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。
   3，每个节点的所有子节点包含的字符串不相同。
   优点：
   可以最大限度地减少无谓的字符串比较，故可以用于词频统计和大量字符串排序。
　 跟哈希表比较：
    1，最坏情况时间复杂度比hash表好
    2，没有冲突，除非一个key对应多个值（除key外的其他信息）
    3，自带排序功能（类似Radix Sort），中序遍历trie可以得到排序。
   缺点：
   1，虽然不同单词共享前缀，但其实trie是一个以空间换时间的算法。其每一个字符都可能包含至多字符集大小数目的指针（不包含卫星数据）。
      每个结点的子树的根节点的组织方式有几种。1>如果默认包含所有字符集，则查找速度快但浪费空间（特别是靠近树底部叶子）。
         2>如果用链接法(如左儿子右兄弟)，则节省空间但查找需顺序（部分）遍历链表。3>alphabet reduction: 减少字符宽度以减少字母集个数
         4>对字符集使用bitmap，再配合链接法。
   2，如果数据存储在外部存储器等较慢位置，Trie会较hash速度慢（hash访问O(1)次外存，Trie访问O(树高)）。
   3，长的浮点数等会让链变得很长。可用bitwise trie改进。
10. 字符串: 额外的字典和指针，字符串自己的方法 “”.join(list(filter(str.isalnum,s.lower())))

     
   
